'use client';

import React, { useEffect, useState } from "react";
import { ListGroup, Spinner, Alert, Card, Container, Row, Col, Form, Button } from "react-bootstrap";
import { FaTrophy } from "react-icons/fa";
import { getTopRankingUsers } from "@/actions/users"; // Adjust the path to your helper file
import generateCertificate from "@/utils/certificate"; // Path to your certificate utility
import { jsPDF } from "jspdf"; // Import jsPDF for PDF generation
import 'jspdf-autotable'; // Required for table creation

const TopRankingUsers = ({ group }) => {
  const [topUsers, setTopUsers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const [interval, setInterval] = useState(7); // Default interval is 7 days
  const [dateRange, setDateRange] = useState({ startDate: "", endDate: "" });

  useEffect(() => {
    const fetchTopUsers = async () => {
      try {
        setLoading(true);
        setError(null);

        const data = await getTopRankingUsers({ group, interval });
        setTopUsers(data);
      } catch (err) {
        setError(err.message || "Failed to fetch top-ranking users.");
      } finally {
        setLoading(false);
      }
    };

    fetchTopUsers();
  }, [group, interval]);

  useEffect(() => {
    const calculateDateRange = () => {
      const currentDate = new Date();
      const startDate = new Date(currentDate);
      startDate.setDate(currentDate.getDate() - interval);

      // Format dates as "Month Day, Year"
      const options = { year: 'numeric', month: 'long', day: 'numeric' };
      const formattedStartDate = startDate.toLocaleDateString("en-US", options);
      const formattedEndDate = currentDate.toLocaleDateString("en-US", options);

      setDateRange({ startDate: formattedStartDate, endDate: formattedEndDate });
    };

    calculateDateRange();
  }, [interval]);

  const handleIntervalChange = (e) => {
    setInterval(Number(e.target.value));
  };

  const handleCertificateGeneration = () => {
    if (topUsers.length > 0) {
      // Find the maximum points earned
      const maxPoints = Math.max(...topUsers.map(user => user.cumulativeRating));

      // Filter users with the same points as the top-ranking user
      const topUsersWithSamePoints = topUsers.filter(user => user.cumulativeRating === maxPoints);

      // Generate certificates for all users with the same points
      topUsersWithSamePoints.forEach((user) => {
        const recipientDetails = {
          recipientName: user.name || "Anonymous User",
          points: user.cumulativeRating,
          groupName: group,
          interval,
          dateRange, // Pass the date range
          issuer: group
        };

        generateCertificate(recipientDetails);
      });
    }
  };

// Function to handle PDF download of top users list
// Function to handle PDF download of top users list
const handleDownloadPDF = () => {
    const doc = new jsPDF();
  
    // Format group name
    const formattedGroup = group === "kwaya_vijana" ? "Kwaya ya Vijana" : group;
  
    // Add a title
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(18);
    doc.text(` ${formattedGroup}`, 105, 25, { align: 'center' });
  
    // Add group name
    doc.setFontSize(14);
    
    doc.text('Msimamo wa Umahiri wa Kutunza Muda', 105, 15, { align: 'center' });
  
    // Add date range
    doc.setFontSize(12);
    doc.text(`Kuanzia: ${dateRange.startDate} mpaka ${dateRange.endDate}`, 105, 35, { align: 'center' });
  
    // Add a table for the top users
    const headers = ['#', 'Jina', 'Alama'];
    const body = topUsers.map((user, index) => [
      index + 1,
      user.name || 'Anonymous User',
      user.cumulativeRating || 'N/A',
    ]);
  
    doc.autoTable({
      head: [headers],
      body: body,
      startY: 45,
      theme: 'grid',
      headStyles: {
        fillColor: [128, 0, 128], // Purple background
        textColor: [255, 255, 255], // White text
      },
      styles: {
        fontSize: 10,
        cellPadding: 3,
      },
      alternateRowStyles: {
        fillColor: [240, 230, 250], // Light purple for alternate rows
      },
    });
  
    // Add Footer Section with text at the bottom center
    const pageHeight = doc.internal.pageSize.height;
    doc.setFont('helvetica', 'italic');
    doc.setFontSize(10);
    doc.setTextColor(128, 0, 128); // Purple color for footer text
    doc.text('Generated by KKKT Yombo Usharika wa Yombo System', 105, pageHeight - 10, { align: 'center' });
  
    // Save the PDF with a filename
    doc.save(`chati_ya_umahiri_${group}.pdf`);
  };
  

  if (loading) {
    return (
      <Container className="text-center mt-5">
        <Spinner animation="border" role="status" variant="primary">
          <span className="visually-hidden">Loading...</span>
        </Spinner>
      </Container>
    );
  }

  if (error) {
    return (
      <Container className="mt-5">
        <Alert variant="danger">{error}</Alert>
      </Container>
    );
  }

  return (
    <Container className="mt-2">
      <h3 className="text-muted mt-3 " align="center">Wanakikundi Bora</h3>
      <Row className="justify-content-center">
        <Col md={8}>
          <Card>
            <Card.Header className="text-center text-white" style={{ backgroundColor: "#6f42c1" }}>
              <FaTrophy className="me-2" />
              Chati ya Points
            </Card.Header>
            <Card.Body>
              <Form className="mb-3">
                <Form.Group controlId="intervalSelect">
                  <Form.Label>Siku</Form.Label>
                  <Form.Control
                    type="number"
                    min="1"
                    max="30"
                    value={interval}
                    onChange={handleIntervalChange}
                    placeholder="Ingiza idadi ya siku..."
                  />
                </Form.Group>
              </Form>
              <ListGroup variant="flush">
                {topUsers.length === 0 ? (
                  <ListGroup.Item>Hakuna kipindi kilichorekodiwa kwa siku hizi</ListGroup.Item>
                ) : (
                  topUsers.map((user, index) => (
                    <ListGroup.Item
                      key={user.userId}
                      className="d-flex justify-content-between align-items-center"
                    >
                      <div className="d-flex align-items-center">
                        <span className="me-3 fw-bold">{index + 1}.</span>
                        <div>
                          <h6 className="mb-0">{user.name || "Anonymous User"}</h6>
                          <small className="text-muted">
                            Points alizokusanya: {user.cumulativeRating}
                          </small>
                        </div>
                      </div>
                      <FaTrophy
                        className={`text-${
                          index === 0 ? "warning" : index === 1 ? "secondary" : "info"
                        }`}
                      />
                    </ListGroup.Item>
                  ))
                )}
              </ListGroup>
              {topUsers.length > 0 && (
                <div className="text-center mt-3">
                  <Button variant="primary" onClick={handleCertificateGeneration}>
                    Pata Cheti kwa Mhudhuriaji Bora
                  </Button>
                  <Button variant="secondary" onClick={handleDownloadPDF} className="ms-2">
                    Download Top Users PDF
                  </Button>
                </div>
              )}
            </Card.Body>
          </Card>
        </Col>
      </Row>
    </Container>
  );
};

export default TopRankingUsers;
